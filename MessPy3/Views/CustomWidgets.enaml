from enaml.widgets.api import *
from enaml.stdlib.fields import *
from enaml.layout.api import *
from enaml.styling import (
      StyleSheet, Style, Setter
)
from enaml.core.api import Include
from enaml.icon import Icon
from qtawesome import icon as qicon

enamldef StateLabel(Label):
    attr dev_state
    constraints << [(width<=100)|'weak']

    func color(dev_state):
        d = dict(init='lightblue', idle='lightgreen', busy='yellow', moving='yellow', error='red')
        return d[dev_state]

    func gradient(color):
        return ('lineargradient(x1: 0, y1:0, x2:0, y2:1, '
                        'stop: 0 %s,  stop: 1 #aaaaaa)'%color)
    StyleSheet:
        Style:
            Setter:
                field = 'background'
                value << gradient(color(dev_state))
            Setter:
                field = 'border'
                value = 'solid 3px black'
    vertical_align = 'center'
    align = 'center'
    text << '<font color="%s">%s</font>'%('black', dev_state)


enamldef FreqView(GroupBox):
    attr wl: float = 200.
    constraints = [hbox(wl_field, l1, wn_field, l2),
                    l1.width == 50, l2.width == 50,
                    wl_field.width <= 100, wn_field.width <= 100]
    Label: l1:
        text = 'nm'
    FloatField: wl_field:
        converter  = lambda x: '%.1f'%x
        minimum = 100.0
        value << parent.wl
        value ::
            parent.wl = value
    Label: l2:
        text = 'cm-1'
    FloatField: wn_field:
        converter  = lambda x: '%.1f'%x
        value << 1e7/max(parent.wl, 1)
        value ::
            parent.wl = 1e7/max(parent.wl, 1)

from qtpy.QtCore import Qt
template SettingsDialog(Content):
    Dialog: dia:
        title = "Mono-Scan Spectrum"
        icon = Icon(_tkdata=qicon('fa5s.chart-area', color='teal'))

        alias content


        activated  ::
            self.proxy.widget.setWindowFlags(Qt.Window)
            self.proxy.widget.setWindowFlags(Qt.FramelessWindowHint)
        Container:
            Container:
                padding = 10
                maximum_size = (900, 300)
                constraints << [hbox(lbl, spacer(0), pb)]
                Label: lbl:
                    text << '<h3>%s'%dia.title
                PushButton: pb:
                    maximum_size = (30, 30)
                    maximum_size = (30, 30)
                    icon = Icon(_tkdata=qicon('fa5s.times', color='teal'))
                    clicked :: dia.close()
                    hug_width = 'ignore'
                    #resist_width = 'ignore'

            Content: content:
                pass

            HGroup:
                leading_spacer = spacer(0)
                PushButton:
                    text = 'Ok'
                    clicked :: dia.accept()
                PushButton:
                    text = 'Cancel'
                    clicked :: dia.reject()



import asyncio as aio
import qasync

async def test():
    while True:
        print('bla')
        await aio.sleep(1)

    return 5

template TestWindow(Content):
    MainWindow: mw:
        attr model
        VGroup:
        #alias model : content.model
            Label:
                text = "bla"
            PushButton:
                text = "click"
                clicked ::
                    print(mw.model)
                    view = Content(model=mw.model)
                    print(view)
                    view.show()
                    sd = SettingsDialog(Content)(None)
                    print(sd[0])
                    sd[0].content.model = mw.model
                    sd[0].show()

            PushButton:
                text = "click2"
                clicked ::

                    a =  aio.create_task(test())
