from enaml.widgets.api import *
from enaml.layout.api import *
from enaml.stdlib.fields import IntField, FloatField

from Views.CustomWidgets import FreqView
import atom.api as a
from enaml.core.api import Looper, Conditional
from enaml.icon import Icon
from EnamlModel import SampleInfo
si = SampleInfo()
import numpy as np
from qtawesome import icon as qicon

from PlotWidget import Plotter, Line

    #Container:
    #    CheckBox: si_enabled:
    #        text = 'Sample info'
    #        checked := siv.enabled
    #    SampleInfoView: siv:
    #        sample_info = model.si

enamldef ScanSpectrumSettingsView(Container):
    attr model


    FreqView: wl_min:
        title = 'Start Wavelength'
        wl := model.wl_min
    FreqView: wl_max:
        title = 'End Wavelength'
        wl := model.wl_max
    Form: frm:

        Label:
            text = "Linear in"
        Form:
            RadioButton: rb_nm:
                text = 'nm'
                checked = model.linear_in == 'wl'
                checked ::
                    model.linear_in = 'wl'
            RadioButton: rb_cm:
                text = 'cm-1'
                checked = model.linear_in == 'wn'
                checked ::
                    model.linear_in = 'wn'
        Label:
            text = 'Steps'
        FloatField: steps:
            value := model.step
        Label:
            text = 'Shots'
        IntField:
            value := model.shots
        Label:
            text = "Filename"
        Field:
            text := model.filename


enamldef ScanSpectrumView(Window) : win:
    attr model
    attr callbacks = []

    modality = 'non_modal'
    title = 'Scan Spectrum'
    icon = Icon(_tkdata=qicon('fa5s.chart-area', color='teal'))

    Container:
        Plotter:
            Looper:
                iterable = model.tuneable_cam.lines
                Line:
                    attr event << win.model.new_point
                    x = 0
                    y = 0

                    func update_data(x=None):
                        y = model.cwl_data[loop_item]
                        x = model.points[:len(y)]
                        self.set_data(x=x, y=y)
                    initialized :: event
                    event :: update_data()
        Label:
            text << 'Point %d/%d' % (model.new_point, len(model.points))
